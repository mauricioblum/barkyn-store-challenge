import React, { useState, useEffect, useMemo } from 'react';
import Head from 'next/head'
import Image from 'next/image'
import { Container, PageWrapper, Title, SubTitle, ProductList, ProductItem, Row, Color, Size, AddToCartButton } from '../styles/pages/Home';
import { Product } from './api/products';
import { fetchProducts } from '../services';
import { useCart, CartProduct } from '../contexts/cartContext';

export default function Home() {

  const [products, setProducts] = useState<Product[]>([]);
  const [selectedProduct, setSelectedProduct] = useState<Product>();
  const [selectedColor, setSelectedColor] = useState('');
  const [selectedSize, setSelectedSize] = useState('');

  const { addProduct, cartProducts } = useCart();

  useEffect(() => {
    async function getProducts() {
      const productsResponse = await fetchProducts();

      if (productsResponse) {
        setProducts(productsResponse);
        console.log('products', productsResponse);
      }
    }
    getProducts();
  }, []);

  const handleAddToCart = () => {

    if (selectedProduct) {

      const { id, image, price, title } = selectedProduct

      const productToCart: CartProduct = {
        id,
        image,
        title,
        price,
        color: selectedColor,
        size: selectedSize,
        quantity: 1,
      };

      console.log('The product to be added to cart: ', productToCart);
      addProduct(productToCart);
    }
  }

  const handleSelectProduct = (product: Product) => {
    setSelectedColor('');
    setSelectedSize('');
    setSelectedProduct(product);
  }

  const addToCartDisabled = useMemo(() => {
    if (selectedColor && selectedSize) {
      return false;
    }
    return true;
  }, [selectedColor, selectedSize])

  return (
    <PageWrapper>
      <Container>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main>
          <Title>Product Shop</Title>

          <section id="products">
            <div className="menu">
              <SubTitle>Products</SubTitle>
              <p>Cart: {cartProducts.length}</p>
            </div>


            <ProductList>
              {products.map(product => (
                <ProductItem key={product.id} aria-label="product">
                  <div onClick={() => handleSelectProduct(product)}>
                    <Image src={product.image} width="100" height="100" />
                    <p>{product.title}</p>
                    <span>â‚¬ {product.price}</span>
                  </div>

                  {selectedProduct?.id === product.id && (
                    <div className="productOptions">
                      <p>Colors</p>
                      <Row>
                        {product.colors.map(color => (
                          <Color key={color} isSelected={color === selectedColor} colorTint={color} onClick={() => setSelectedColor(color)} />
                        ))}
                      </Row>

                      <p>Size</p>
                      <Row>
                        {product.sizes.map(size => (
                          <Size key={size} isSelected={size === selectedSize} onClick={() => setSelectedSize(size)}>{size}</Size>
                        ))}
                      </Row>

                      <AddToCartButton disabled={addToCartDisabled} onClick={handleAddToCart}>Add to Cart</AddToCartButton>
                    </div>
                  )}
                </ProductItem>
              ))}
            </ProductList>

          </section>
        </main>

      </Container>
      <footer>
        <a
          href="https://www.barkyn.com/"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span>
            Barkyn
          </span>
        </a>
      </footer>
    </PageWrapper>
  )
}
